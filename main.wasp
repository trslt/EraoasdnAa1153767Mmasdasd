// ==========================
// APP CONFIGURATION
// ==========================
app OpenSaaS {
  wasp: {
    version: "^0.16.0"
  },

  title: "Youpiter",

  head: [
    "<meta charset='utf-8' />",
    "<meta name='description' content='Your apps main description and features.' />",
    "<meta name='author' content='Your (App) Name' />",
    "<meta name='keywords' content='saas, solution, product, app, service' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='Your Open SaaS App' />",
    "<meta property='og:site_name' content='Your Open SaaS App' />",
    "<meta property='og:url' content='https://your-saas-app.com' />",
    "<meta property='og:description' content='Your apps main description and features.' />",
    "<meta property='og:image' content='https://your-saas-app.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://your-saas-app.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",  // for production
    // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",  // for development
    // Font utilizzate da Konsta UI KIT
    "<link rel='preconnect' href='https://fonts.googleapis.com' />",
    "<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />",
    "<link href='https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&display=swap' rel='stylesheet' />",
    "<meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover' />",
    // Fine import per Konsta UI KIT
  ],

  // 🔐 Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "Open SaaS App",
          email: "me@example.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Google Auth (check https://wasp-lang.dev/docs/auth/social-auth/google for setup instructions):
      // google: { // Guide for setting up Auth via Google
      //   userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable GitHub Auth (check https://wasp-lang.dev/docs/auth/social-auth/github for setup instructions):
      // gitHub: {
      //   userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Discord Auth (check https://wasp-lang.dev/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onAuthFailedRedirectTo: "/app/auth/login", // /login, la rotta di default
    onAuthSucceededRedirectTo: "/app",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    // NOTE: "Dummy" provider is just for local development purposes.
    //   Make sure to check the server logs for the email confirmation url (it will not be sent to an address)!
    //   Once you are ready for production, switch to e.g. "SendGrid" or "Mailgun" providers. Check out https://docs.opensaas.sh/guides/email-sending/ .
    provider: Dummy,
    defaultFrom: {
      name: "Open SaaS App",
      // When using a real provider, e.g. SendGrid, you must use the same email address that you configured your account to send out emails with!
      email: "me@example.com"
    },
  },
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>
// START WASP ROUTES AND PAGES
// >>>>>>>>>>>>>>>>>>>>>>>>>>
route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage",
  authRequired: false,
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage",
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/user/operations",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/user/operations",
  entities: [User]
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/payment/CheckoutPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}

job sendNewsletter {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueNewsletterEmails } from "@src/newsletter/sendNewsletter"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}

query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}

route AdminRoute { path: "/default/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/default/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/default/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminChartsRoute { path: "/default/admin/chart", to: AdminChartsPage }
page AdminChartsPage {
  authRequired: true,
  component: import AdminCharts from "@src/admin/elements/charts/ChartsPage"
}

route AdminFormElementsRoute { path: "/default/admin/forms/form-elements", to: AdminFormElementsPage }
page AdminFormElementsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormElementsPage"
}

route AdminFormLayoutsRoute { path: "/default/admin/forms/form-layouts", to: AdminFormLayoutsPage }
page AdminFormLayoutsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormLayoutsPage"
}

route AdminCalendarRoute { path: "/default/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}

route AdminUIAlertsRoute { path: "/default/admin/ui/alerts", to: AdminUIAlertsPage }
page AdminUIAlertsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/AlertsPage"
}

route AdminUIButtonsRoute { path: "/default/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route AdminMessagesRoute { path: "/default/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/messages/MessagesPage"
}

// <<<<<<<<<<<<<<<<<<<<<<<<<<
// FINE WASP
// <<<<<<<<<<<<<<<<<<<<<<<<<<


// >>>>>>>>>>>>>>>>>>>>>>>>>>
//  START YOUPITER LMS APP   |
// >>>>>>>>>>>>>>>>>>>>>>>>>>

// TODO: da sostituire con una rotta per Youpiter LMS
route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>
// ADMIN ROUTES START
// >>>>>>>>>>>>>>>>>>>>>>>>>>

// ==========================
// COURSE ROUTES - ADMIN
// ==========================

// ======= /admin ======= Pagina iniziale dell'area amministrativa
route HomeAdminPageRoute { path: "/admin", to: HomeAdminPage }
page HomeAdminPage {
  authRequired: true,
  component: import HomeAdminPage from "@src/courses-app/pages/admin/HomeAdminPage"
}

// ======= /admin/course ======= Creazione corso
route CourseCreateAdminPageRoute { path: "/admin/course", to: CourseCreateAdminPage }
page CourseCreateAdminPage {
  authRequired: true,
  component: import CourseCreateAdminPage from "@src/courses-app/pages/admin/course/CourseCreateAdminPage"
}

// ======= /admin/course/:courseId/edit ======= Modifica corso
route CourseEditAdminPageRoute { path: "/admin/course/:courseId/edit", to: CourseEditAdminPage }
page CourseEditAdminPage {
  authRequired: true,
  component: import CourseEditAdminPage from "@src/courses-app/pages/admin/course/CourseEditAdminPage"
}

// ======= /admin/course/:courseId ======= Dettaglio corso
route CourseViewAdminPageRoute { path: "/admin/course/:courseId", to: CourseViewAdminPage }
page CourseViewAdminPage {
  authRequired: true,
  component: import CourseViewAdminPage from "@src/courses-app/pages/admin/course/CourseViewAdminPage"
}

// ======= /admin/courses ======= Lista corsi
route CourseListAdminPageRoute { path: "/admin/courses", to: CourseListAdminPage }
page CourseListAdminPage {
  authRequired: true,
  component: import CourseListAdminPage from "@src/courses-app/pages/admin/course/CourseListAdminPage"
}

// ==========================
// CHAPTER ROUTES - ADMIN
// ==========================

// ======= /admin/course/:courseId/chapters/edit ======= Modifica capitoli
route ChapterListEditAdminPageRoute { path: "/admin/course/:courseId/chapters/edit", to: ChapterListEditAdminPage }
page ChapterListEditAdminPage {
  authRequired: true,
  component: import ChapterListEditAdminPage from "@src/courses-app/pages/admin/chapter/ChapterListEditAdminPage"
}

// ==========================
// LESSON ROUTES - ADMIN
// ==========================
route LessonEditAdminPageRoute { path: "/lesson/:lessonId/edit", to: LessonEditAdminPage }
page LessonEditAdminPage {
  authRequired: true,
  component: import LessonEditAdminPage from "@src/courses-app/pages/admin/lesson/LessonEditAdminPage"
}

// <<<<<<<<<<<<<<<<<<<<<<<<<<
// ADMIN ROUTES END
// <<<<<<<<<<<<<<<<<<<<<<<<<<

// >>>>>>>>>>>>>>>>>>>>>>>>>>
// APP ROUTES START
// >>>>>>>>>>>>>>>>>>>>>>>>>>

// ======= /app ======= Pagina iniziale dell'app
route HomeAppPageRoute { path: "/app", to: HomeAppPage }
page HomeAppPage {
  authRequired: true,
  component: import HomeAppPage from "@src/courses-app/pages/app/HomeAppPage"
}

// ==========================
// AUTH ROUTES - APP
// ==========================

// ======= /app/auth/ask-password-reset ======= Richiesta reset password
route AuthAskPasswordResetPageRoute { path: "/app/auth/ask-password-reset", to: AuthAskPasswordResetPage }
page AuthAskPasswordResetPage {
  component: import AppAskPasswordResetPage from "@src/courses-app/pages/auth/AuthAskPasswordResetPage"
}

// ======= /app/auth/signup ======= Registrazione utente
route AuthSignupPageRoute { path: "/app/auth/signup", to: AuthSignupPage }
page AuthSignupPage {
  component: import AuthSignupPage from "@src/courses-app/pages/auth/AuthSignupPage"
}

// ======= /app/auth/password-reset ======= Reset password
route AuthPasswordResetPageRoute { path: "/app/auth/password-reset", to: AuthPasswordResetPage }
page AuthPasswordResetPage {
  component: import AuthPasswordResetPage from "@src/courses-app/pages/auth/AuthPasswordResetPage"
}

// ======= /app/auth/email-verification ======= Verifica email
route AuthEmailVerificationPageRoute { path: "/app/auth/email-verification", to: AuthEmailVerificationPage }
page AuthEmailVerificationPage {
  component: import AuthEmailVerificationPage from "@src/courses-app/pages/auth/AuthEmailVerificationPage"
}

// ======= /app/auth/login ======= Login utente
route AuthLoginPageRoute { path: "/app/auth/login", to: AuthLoginPage }
page AuthLoginPage {
  component: import AppLoginPage from "@src/courses-app/pages/auth/AuthLoginPage"
}

// ==========================
// USER ROUTES - APP
// ==========================

// ======= /app/me ======= Profilo utente
route UserViewAppPageRoute { path: "/app/me", to: UserViewAppPage }
page UserViewAppPage {
  authRequired: true,
  component: import UserViewAppPage from "@src/courses-app/pages/app/user/UserViewAppPage"
}

// ======= /app/me/courses ======= Corsi dell'utente autenticato
route UserCourseListAppPageRoute { path: "/app/me/courses", to: UserCourseListAppPage }
page UserCourseListAppPage {
  authRequired: true,
  component: import UserCourseListAppPage from "@src/courses-app/pages/app/user/UserCourseListAppPage"
}

// ======= /app/me/certificates ======= Certificati dell'utente autenticato
route UserCertificateListAppPageRoute { path: "/app/me/certificates", to: UserCertificateListAppPage }
page UserCertificateListAppPage {
  authRequired: true,
  component: import UserCertificateListAppPage from "@src/courses-app/pages/app/user/UserCertificateListAppPage"
}

// ======= /app/me/settings ======= Impostazioni utente
route UserSettingsAppPageRoute { path: "/app/me/settings", to: UserSettingsAppPage }
page UserSettingsAppPage {
  authRequired: true,
  component: import UserSettingsAppPage from "@src/courses-app/pages/app/user/UserSettingsAppPage"
}

// ==========================
// COURSE ROUTES - APP
// ==========================

// ======= /app/courses ======= Lista dei corsi
route CourseListAppRoute { path: "/app/courses", to: CourseListAppPage }
page CourseListAppPage {
  authRequired: true,
  component: import CourseListAppPage from "@src/courses-app/pages/app/course/CourseListAppPage"
}

// ======= /app/course/search ======= Ricerca corsi
route CourseSearchAppPageRoute { path: "/app/course/search", to: CourseSearchAppPage }
page CourseSearchAppPage {
  authRequired: true,
  component: import SearchCoursePage from "@src/courses-app/pages/app/course/CourseSearchAppPage"
}

// ======= /app/course/:courseId ======= Dettaglio corso
route CourseViewAppPageRoute { path: "/app/course/:courseId", to: CourseViewAppPage }
page CourseViewAppPage {
  authRequired: true,
  component: import AppCoursePage from "@src/courses-app/pages/app/course/CourseViewAppPage"
}

// ======= /app/course/:courseId/review ======= Recensioni del corso
route CourseReviewAppPageRoute { path: "/app/course/:courseId/review", to: CourseReviewAppPage }
page CourseReviewAppPage {
  authRequired: true,
  component: import CourseReviewAppPage from "@src/courses-app/pages/app/course/CourseReviewAppPage"
}

// ======= /app/course/not-found ======= Pagina corso non trovato
route CourseNotFoundAppPageRoute { path: "/app/course/not-found", to: CourseNotFoundAppPage }
page CourseNotFoundAppPage {
  authRequired: true,
  component: import CourseNotFoundAppPage from "@src/courses-app/pages/app/course/CourseNotFoundAppPage"
}

// ==========================
// CHAPTER ROUTES - APP
// ==========================

// ======= /app/course/:courseId/chapter/:chapterId ======= Dettaglio capitolo del corso
route ChapterViewAppPageRoute { path: "/app/course/:courseId/chapter/:chapterId", to: ChapterViewAppPage }
page ChapterViewAppPage {
  authRequired: true,
  component: import ChapterViewAppPage from "@src/courses-app/pages/app/chapter/ChapterViewAppPage"
}

// ==========================
// INSTRUCTOR ROUTES - APP
// ==========================

// ======= /app/instructor/:instructorId ======= Dettaglio istruttore
route InstructorViewAppPageRoute { path: "/app/instructor/:instructorId", to: InstructorViewAppPage }
page InstructorViewAppPage {
  authRequired: true,
  component: import InstructorPage from "@src/courses-app/pages/app/instructor/InstructorViewAppPage"
}

// ==========================
// LESSON ROUTES - APP
// ==========================

// ======= /app/course/lesson/:lessonId ======= Dettaglio lezione del corso
route LessonViewAppPageRoute { path: "/app/course/lesson/:lessonId", to: LessonViewAppPage }
page LessonViewAppPage {
  authRequired: true,
  component: import LessonViewAppPage from "@src/courses-app/pages/app/lesson/LessonViewAppPage"
}

// ======= /app/lesson/:lessonId/play ======= Riproduzione lezione
route LessonPlayAppPageRoute { path: "/app/lesson/:lessonId/play", to: LessonPlayAppPage }
page LessonPlayAppPage {
  authRequired: true,
  component: import LessonPlayAppPage from "@src/courses-app/pages/app/lesson/LessonPlayAppPage"
}
// <<<<<<<<<<<<<<<<<<<<<<<<<<
// APP ROUTES END
// <<<<<<<<<<<<<<<<<<<<<<<<<<

// ==========================
// COURSE CATEGORIES - OPERATIONS
// ==========================
query getCourseCategories {
  fn: import { getCourseCategories } from "@src/courses-app/operations/shared/CourseOperations",
  entities: [CourseCategory]
}

// ==========================
// CHAPTER - OPERATIONS
// ==========================
query getCourseChapters {
  fn: import { getCourseChapters } from "@src/courses-app/operations/shared/CourseOperations",
  entities: [Chapter]
}

query getUserInstructors {
  fn: import { getUserInstructors } from "@src/courses-app/operations/UserOperations",
  entities: [UserInstructor]
}

query getChapterNextLesson {
  fn: import { getChapterNextLesson } from "@src/courses-app/operations/shared/CourseOperations",
  entities: [Chapter, Lesson, CourseEnrollment, StudentProgress]
}

query getLessonsByChapterIDs {
  fn: import { getLessonsByChapterIDs } from "@src/courses-app/operations/shared/LessonOperations",
  entities: [LessonsInChapters]
}

//#action

//#apis Middleware per CORS
apiNamespace coursesAppNamespaceMiddlewareFn {
  middlewareConfigFn: import { coursesAppNamespaceMiddlewareFn } from "@src/courses-app/api/GeneralApi.ts",
  path: "/api"
}
// ==========================
// COURSE - API & OPERATIONS
// ==========================

// ======= Dettaglio Corso
query courseGet {
  fn: import { courseGet } from "@src/courses-app/operations/shared/CourseOperations",
  entities: [Course]
}

// ======= Lista Corsi
query courseList {
  fn: import { courseList } from "@src/courses-app/operations/shared/CourseOperations",
  entities: [Course]
}

// ======= /api/admin/course ======= Creazione corso
api CourseCreate { 
  fn: import { courseCreate } from "@src/courses-app/api/admin/CourseApi",
  httpRoute: (POST, "/api/admin/course"),
  auth: true,
  entities: [Course]
}

// ======= /api/admin/course/:courseId ======= Aggiornamento corso
api CourseUpdate { 
  fn: import { courseUpdate } from "@src/courses-app/api/admin/CourseApi",
  httpRoute: (PUT, "/api/admin/course/:courseId"),
  auth: true,
  entities: [Course, CourseCategory]
}

// ======= /api/admin/course/:courseId/cover ======= Aggiornamento copertina corso
api CourseCoverUpdate { 
  fn: import { courseCoverUpdate } from "@src/courses-app/api/admin/CourseApi",
  httpRoute: (PUT, "/api/admin/course/:courseId/cover"),
  auth: true,
  entities: [Course]
}

// ======= /api/admin/course/:courseId/categories ======= Aggiornamento categorie corso
api CourseCategoryUpdate { 
  fn: import { courseCategoryUpdate } from "@src/courses-app/api/admin/CourseApi",
  httpRoute: (PUT, "/api/admin/course/:courseId/categories"),
  auth: true,
  entities: [Course, CourseCategory]
}

// ======= /api/admin/course/:courseId/instructors ======= Aggiornamento istruttori corso
api CourseInstructorUpdate { 
  fn: import { courseInstructorUpdate } from "@src/courses-app/api/admin/CourseApi",
  httpRoute: (PUT, "/api/admin/course/:courseId/instructors"),
  auth: true,
  entities: [Course, UserInstructor]
}

// ======= Dettaglio Lezione
query lessonGet {
  fn: import { lessonGet } from "@src/courses-app/operations/shared/LessonOperations",
  entities: [Lesson]
}

// ======= Dettaglio contenuo lezione
query lessonContentGet {
  fn: import { lessonContentGet } from "@src/courses-app/operations/shared/LessonOperations",
  entities: [LessonContent]
}

// ======= /api/admin/lesson ======= Creazione lezione
api LessonCreate { 
  fn: import { lessonCreate } from "@src/courses-app/api/admin/LessonApi",
  httpRoute: (POST, "/api/admin/lesson"),
  auth: true,
  entities: [Lesson, LessonsInChapters, LessonContent]
}

// ======= /api/admin/course/:courseId/chapter ======= Creazione capitolo
api ChapterCreate { 
  fn: import { chapterCreate } from "@src/courses-app/api/admin/ChapterApi",
  httpRoute: (PUT, "/api/admin/course/:courseId/chapter"),
  auth: true,
  entities: [Chapter]
}

// ======= Lista Quiz
query quizList {
  fn: import { quizList } from "@src/courses-app/operations/shared/QuizOperations",
  entities: [Quiz, QuizTranslation]
}

// ======= Dettaglio Quiz
query quizGet {
  fn: import { quizGet } from "@src/courses-app/operations/shared/QuizOperations",
  entities: [Quiz, QuizTranslation, QuizQuestion, Question]
}

// ======= /api/admin/quiz ======= Creazione quiz
api QuizCreate { 
  fn: import { quizCreate } from "@src/courses-app/api/admin/QuizApi",
  httpRoute: (POST, "/api/admin/quiz"),
  auth: true,
  entities: [Quiz, QuizTranslation]
}

// ======= /api/admin/quiz/:quizId ======= Aggiornamento quiz
api QuizUpdate { 
  fn: import { quizUpdate } from "@src/courses-app/api/admin/QuizApi",
  httpRoute: (PUT, "/api/admin/quiz/:quizId"),
  auth: true,
  entities: [Quiz, QuizTranslation]
}

// ======= /api/admin/quiz/:quizId ======= Eliminazione quiz
api QuizDelete { 
  fn: import { quizDelete } from "@src/courses-app/api/admin/QuizApi",
  httpRoute: (DELETE, "/api/admin/quiz/:quizId"),
  auth: true,
  entities: [Quiz]
}

// ======= /api/admin/lesson/:lessonId/content ======= Aggiornamento contenuto lezione
api LessonContentUpdate {
  fn: import { lessonContentUpdate } from "@src/courses-app/api/admin/LessonContentApi",
  httpRoute: (PUT, "/api/admin/lesson/:lessonId/content"),
  auth: true,
  entities: [LessonContent]
}

// ======= /api/admin/question ======= Creazione domanda
api QuestionCreate { 
  fn: import { questionCreate } from "@src/courses-app/api/admin/QuestionApi",
  httpRoute: (POST, "/api/admin/question"),
  auth: true,
  entities: [Question, QuestionTranslation, Option, OptionTranslation]
}

// ======= /api/admin/question/:questionId ======= Aggiornamento domanda
api QuestionUpdate { 
  fn: import { questionUpdate } from "@src/courses-app/api/admin/QuestionApi",
  httpRoute: (PUT, "/api/admin/question/:questionId"),
  auth: true,
  entities: [Question, QuestionTranslation, Option, OptionTranslation]
}

// ======= /api/admin/question/:questionId ======= Eliminazione domanda
api QuestionDelete { 
  fn: import { questionDelete } from "@src/courses-app/api/admin/QuestionApi",
  httpRoute: (DELETE, "/api/admin/question/:questionId"),
  auth: true,
  entities: [Question]
}

api GetUploadPresignedURL { 
  fn: import { getUploadPresignedURL } from "@src/courses-app/api/AdminApi.ts",
  httpRoute: (POST, "/api/admin/permission/upload"),
  auth: true,
  entities: [Course]
}


api CourseEnrollment { 
  fn: import { courseEnrollment } from "@src/courses-app/api/CourseApi",
  httpRoute: (POST, "/api/course/:courseId/enroll"),
  auth: true,
  entities: [Course, CourseEnrollment, StudentProgress]
}

// QUIZ
api AssociateLessonQuiz { 
  fn: import { associateLessonQuiz } from "@src/courses-app/api/QuizApi",
  httpRoute: (POST, "/api/admin/lesson/:lessonId/quiz"),
  auth: true,
  entities: [Lesson, Quiz, LessonQuiz]
}

api AddQuestionToQuiz { 
  fn: import { addQuestionToQuiz } from "@src/courses-app/api/QuizApi",
  httpRoute: (POST, "/api/admin/quiz/:quizId/questions"),
  auth: true,
  entities: [Quiz, Question, QuizQuestion]
}

api RemoveQuestionFromQuiz { 
  fn: import { removeQuestionFromQuiz } from "@src/courses-app/api/QuizApi",
  httpRoute: (DELETE, "/api/admin/quiz/:quizId/questions/:questionId"),
  auth: true,
  entities: [Quiz, Question, QuizQuestion]
}


query getUserQuizAttempts {
  fn: import { getUserQuizAttempts } from "@src/courses-app/operations/shared/QuizOperations",
  entities: [UserQuizAttempt, Quiz, QuizQuestion, Question, Option]
}

query getLessonQuizzes {
  fn: import { getLessonQuizzes } from "@src/courses-app/operations/shared/QuizOperations",
  entities: [Lesson, Quiz, LessonQuiz]
}
// ==========================
// QUIZ - API
// ==========================


// ==========================
// QUESTION - API
// ==========================

// ==========================
// QUESTION - OPERATIONS
// ==========================
query getQuestion {
  fn: import { getQuestion } from "@src/courses-app/operations/QuestionOperations",
  entities: [Question, QuestionTranslation, Option, OptionTranslation]
}

query getQuestionsBySkill {
  fn: import { getQuestionsBySkill } from "@src/courses-app/operations/QuestionOperations",
  entities: [Question, QuestionTranslation, Option, OptionTranslation]
}